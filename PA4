"""
Program to predict the sentiment of input text as either positive, neagtive or neutral.
"""

def read_sentiment_words(filename):
    """
    Read the input text file line by line and 
    return the dictionary of words with their value set to zero.
    Output format example: {'orange':0, 'banana':0,...}
    """
    sentiment = open(filename, 'r')
    lines = sentiment.readlines()
    Dict = {}
    for w in lines:
        if w not in Dict:
            w = w[:-1]
            Dict[w] = 0
        else:
            continue
    sentiment.close()
    return Dict

positive_words = {} #read positive sentiment words from file
negative_words = {} #read negative sentiment words from file

def read_sentences(filename):
    """
    Read the input text file line by line and
    return the data as a list of list.
    Output format example: [['1', 'hello , how are you?'], ['2', 'have a great day !'], ...]
    """
    #Your code here
    files = open(filename, 'r')
    lines = files.readlines()
    sentenceLst = []
    mainList = []
    w = 1
    for i in lines:
        sentenceLst.append(str(w))
        w = w + 1
        sentenceLst.append(i)
        mainList.append(sentenceLst)
        sentenceLst = []
    return mainList
def listOfPositiveWords():
    postiveList = {}
    for i in read_sentiment_words('positive-words.txt'):
        postiveList[i] = 0
    return postiveList
def listOfNegativeWords():
    negativeList = {}
    for i in read_sentiment_words('negative-words.txt'):
        negativeList[i] = 0
    return negativeList

def write_sentiments(filename, sentence_sentiment_lst):
    """
    Write a list of lists of review text sentiment values to file.
    The sentence index and the sentiment value must be separated by comma.
    Example Input: sentence_sentiment_lst = [['1', 'positive'], ['2', 'negative'],...]
    Output File format: lastname_firstname_sentiments.txt

    """

    sentiFile = open(filename, 'w+')
    reviewFile = open(sentence_sentiment_lst, 'r')
    lines = reviewFile.readlines()
    posWords = listOfPositiveWords()
    negWords = listOfNegativeWords()
    p = 1
    for line in lines:
        sentimentCount = 0
        words = line.split("\t")[1]
        for w in words.split():
            if w in posWords:
                sentimentCount += 1
            elif w in negWords:
                sentimentCount += -1
        if sentimentCount > 0:
            sentiFile.write(str(p) + ", " + "positive" + "\n")
            p += 1
        elif sentimentCount < 0:
            sentiFile.write(str(p) + ", " + "negative" + "\n")
            p += 1
        else:
            sentiFile.write(str(p) + ", " + "neutral" + "\n")
            p += 1
    reviewFile.close()
    sentiFile.close()
    return sentiFile





def  write_sentiment_words(filename,  top_words_frequency_lst):
    """
    Write the word and frequency value for top 5 sentiment words to file separated by comma.
    Output File format: lastname_firstname_sentiment_words.txt
    """
    #Your code here


def predict_sentiment(review_text):
    """
    Find the sentiment of the review text, based on the sentiment of each word in the text.
    Return "postive", "negative", or "neutral" depending on the total sentiment word count value.
    """
    global positive_words, negative_words
    sentiment_count = 0
    #Your code here

def most_frequent_sentiment_word(sentiment_word_dict):
    """
    Find the word with the highest frequency value from the dictionary and
    return the word and it's frequency.
    """
    #Your code here

def main():
    read_sentences('sentences.tsv')
    print(read_sentiment_words('positive-words.txt'))
    read_sentiment_words('negative-words.txt')
    read_sentences('sentences.tsv')
    write_sentiments('Ahmed_Awais_sentiments.txt', 'sentences.tsv')

#    reviews = #read reviews from file

    #Your code here


if __name__ == '__main__':
    main()
